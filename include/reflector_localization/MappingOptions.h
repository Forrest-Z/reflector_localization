// Generated by gencpp from file reflector_localization/MappingOptions.msg
// DO NOT EDIT!


#ifndef REFLECTOR_LOCALIZATION_MESSAGE_MAPPINGOPTIONS_H
#define REFLECTOR_LOCALIZATION_MESSAGE_MAPPINGOPTIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflector_localization
{
template <class ContainerAllocator>
struct MappingOptions_
{
  typedef MappingOptions_<ContainerAllocator> Type;

  MappingOptions_()
    : brand(0)
    , load_map(false)
    , map_filename()
    , use_full_graph(false)
    , use_graph_mst(false)
    , merge_distance(0.0)
    , distance_match_tolerance(0.0)
    , relocate_match_tolerance(0.0)
    , distance_ceil_threshold(0.0)
    , id_diff_ceil_threshold(0)
    , init_edge_belief(0.0)  {
    }
  MappingOptions_(const ContainerAllocator& _alloc)
    : brand(0)
    , load_map(false)
    , map_filename(_alloc)
    , use_full_graph(false)
    , use_graph_mst(false)
    , merge_distance(0.0)
    , distance_match_tolerance(0.0)
    , relocate_match_tolerance(0.0)
    , distance_ceil_threshold(0.0)
    , id_diff_ceil_threshold(0)
    , init_edge_belief(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _brand_type;
  _brand_type brand;

   typedef uint8_t _load_map_type;
  _load_map_type load_map;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_filename_type;
  _map_filename_type map_filename;

   typedef uint8_t _use_full_graph_type;
  _use_full_graph_type use_full_graph;

   typedef uint8_t _use_graph_mst_type;
  _use_graph_mst_type use_graph_mst;

   typedef double _merge_distance_type;
  _merge_distance_type merge_distance;

   typedef double _distance_match_tolerance_type;
  _distance_match_tolerance_type distance_match_tolerance;

   typedef double _relocate_match_tolerance_type;
  _relocate_match_tolerance_type relocate_match_tolerance;

   typedef double _distance_ceil_threshold_type;
  _distance_ceil_threshold_type distance_ceil_threshold;

   typedef int32_t _id_diff_ceil_threshold_type;
  _id_diff_ceil_threshold_type id_diff_ceil_threshold;

   typedef double _init_edge_belief_type;
  _init_edge_belief_type init_edge_belief;





  typedef boost::shared_ptr< ::reflector_localization::MappingOptions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflector_localization::MappingOptions_<ContainerAllocator> const> ConstPtr;

}; // struct MappingOptions_

typedef ::reflector_localization::MappingOptions_<std::allocator<void> > MappingOptions;

typedef boost::shared_ptr< ::reflector_localization::MappingOptions > MappingOptionsPtr;
typedef boost::shared_ptr< ::reflector_localization::MappingOptions const> MappingOptionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflector_localization::MappingOptions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflector_localization::MappingOptions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflector_localization::MappingOptions_<ContainerAllocator1> & lhs, const ::reflector_localization::MappingOptions_<ContainerAllocator2> & rhs)
{
  return lhs.brand == rhs.brand &&
    lhs.load_map == rhs.load_map &&
    lhs.map_filename == rhs.map_filename &&
    lhs.use_full_graph == rhs.use_full_graph &&
    lhs.use_graph_mst == rhs.use_graph_mst &&
    lhs.merge_distance == rhs.merge_distance &&
    lhs.distance_match_tolerance == rhs.distance_match_tolerance &&
    lhs.relocate_match_tolerance == rhs.relocate_match_tolerance &&
    lhs.distance_ceil_threshold == rhs.distance_ceil_threshold &&
    lhs.id_diff_ceil_threshold == rhs.id_diff_ceil_threshold &&
    lhs.init_edge_belief == rhs.init_edge_belief;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflector_localization::MappingOptions_<ContainerAllocator1> & lhs, const ::reflector_localization::MappingOptions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflector_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::MappingOptions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::MappingOptions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::MappingOptions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::MappingOptions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::MappingOptions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::MappingOptions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflector_localization::MappingOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fabd657c5a8578dfafca3752345ae6";
  }

  static const char* value(const ::reflector_localization::MappingOptions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fabd657c5a8578ULL;
  static const uint64_t static_value2 = 0xdfafca3752345ae6ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflector_localization::MappingOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflector_localization/MappingOptions";
  }

  static const char* value(const ::reflector_localization::MappingOptions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflector_localization::MappingOptions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 brand\n"
"\n"
"bool load_map\n"
"string map_filename\n"
"\n"
"bool use_full_graph\n"
"bool use_graph_mst\n"
"\n"
"float64 merge_distance\n"
"float64 distance_match_tolerance\n"
"float64 relocate_match_tolerance\n"
"float64 distance_ceil_threshold\n"
"int32 id_diff_ceil_threshold\n"
"float64 init_edge_belief \n"
;
  }

  static const char* value(const ::reflector_localization::MappingOptions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflector_localization::MappingOptions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brand);
      stream.next(m.load_map);
      stream.next(m.map_filename);
      stream.next(m.use_full_graph);
      stream.next(m.use_graph_mst);
      stream.next(m.merge_distance);
      stream.next(m.distance_match_tolerance);
      stream.next(m.relocate_match_tolerance);
      stream.next(m.distance_ceil_threshold);
      stream.next(m.id_diff_ceil_threshold);
      stream.next(m.init_edge_belief);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MappingOptions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflector_localization::MappingOptions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflector_localization::MappingOptions_<ContainerAllocator>& v)
  {
    s << indent << "brand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brand);
    s << indent << "load_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.load_map);
    s << indent << "map_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_filename);
    s << indent << "use_full_graph: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_full_graph);
    s << indent << "use_graph_mst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_graph_mst);
    s << indent << "merge_distance: ";
    Printer<double>::stream(s, indent + "  ", v.merge_distance);
    s << indent << "distance_match_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.distance_match_tolerance);
    s << indent << "relocate_match_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.relocate_match_tolerance);
    s << indent << "distance_ceil_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.distance_ceil_threshold);
    s << indent << "id_diff_ceil_threshold: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id_diff_ceil_threshold);
    s << indent << "init_edge_belief: ";
    Printer<double>::stream(s, indent + "  ", v.init_edge_belief);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLECTOR_LOCALIZATION_MESSAGE_MAPPINGOPTIONS_H
