// Generated by gencpp from file reflector_localization/Feature2DAdjacency.msg
// DO NOT EDIT!


#ifndef REFLECTOR_LOCALIZATION_MESSAGE_FEATURE2DADJACENCY_H
#define REFLECTOR_LOCALIZATION_MESSAGE_FEATURE2DADJACENCY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflector_localization
{
template <class ContainerAllocator>
struct Feature2DAdjacency_
{
  typedef Feature2DAdjacency_<ContainerAllocator> Type;

  Feature2DAdjacency_()
    : ID1(0)
    , ID2(0)  {
    }
  Feature2DAdjacency_(const ContainerAllocator& _alloc)
    : ID1(0)
    , ID2(0)  {
  (void)_alloc;
    }



   typedef int32_t _ID1_type;
  _ID1_type ID1;

   typedef int32_t _ID2_type;
  _ID2_type ID2;





  typedef boost::shared_ptr< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> const> ConstPtr;

}; // struct Feature2DAdjacency_

typedef ::reflector_localization::Feature2DAdjacency_<std::allocator<void> > Feature2DAdjacency;

typedef boost::shared_ptr< ::reflector_localization::Feature2DAdjacency > Feature2DAdjacencyPtr;
typedef boost::shared_ptr< ::reflector_localization::Feature2DAdjacency const> Feature2DAdjacencyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator1> & lhs, const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator2> & rhs)
{
  return lhs.ID1 == rhs.ID1 &&
    lhs.ID2 == rhs.ID2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator1> & lhs, const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflector_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e9e8e6fd3e3e911e3ca8920dfab8bf0";
  }

  static const char* value(const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e9e8e6fd3e3e911ULL;
  static const uint64_t static_value2 = 0xe3ca8920dfab8bf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflector_localization/Feature2DAdjacency";
  }

  static const char* value(const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ID1\n"
"int32 ID2\n"
;
  }

  static const char* value(const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID1);
      stream.next(m.ID2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feature2DAdjacency_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflector_localization::Feature2DAdjacency_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflector_localization::Feature2DAdjacency_<ContainerAllocator>& v)
  {
    s << indent << "ID1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID1);
    s << indent << "ID2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLECTOR_LOCALIZATION_MESSAGE_FEATURE2DADJACENCY_H
