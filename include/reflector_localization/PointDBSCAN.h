// Generated by gencpp from file reflector_localization/PointDBSCAN.msg
// DO NOT EDIT!


#ifndef REFLECTOR_LOCALIZATION_MESSAGE_POINTDBSCAN_H
#define REFLECTOR_LOCALIZATION_MESSAGE_POINTDBSCAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reflector_localization
{
template <class ContainerAllocator>
struct PointDBSCAN_
{
  typedef PointDBSCAN_<ContainerAllocator> Type;

  PointDBSCAN_()
    : status(0)
    , id(0)
    , x(0.0)
    , y(0.0)  {
    }
  PointDBSCAN_(const ContainerAllocator& _alloc)
    : status(0)
    , id(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef int32_t _id_type;
  _id_type id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(NOISE)
  #undef NOISE
#endif
#if defined(_WIN32) && defined(UNCLASSIFIED)
  #undef UNCLASSIFIED
#endif
#if defined(_WIN32) && defined(CLASSIFIED)
  #undef CLASSIFIED
#endif

  enum {
    FAILURE = -3,
    NOISE = -2,
    UNCLASSIFIED = -1,
    CLASSIFIED = 0,
  };


  typedef boost::shared_ptr< ::reflector_localization::PointDBSCAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reflector_localization::PointDBSCAN_<ContainerAllocator> const> ConstPtr;

}; // struct PointDBSCAN_

typedef ::reflector_localization::PointDBSCAN_<std::allocator<void> > PointDBSCAN;

typedef boost::shared_ptr< ::reflector_localization::PointDBSCAN > PointDBSCANPtr;
typedef boost::shared_ptr< ::reflector_localization::PointDBSCAN const> PointDBSCANConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reflector_localization::PointDBSCAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reflector_localization::PointDBSCAN_<ContainerAllocator1> & lhs, const ::reflector_localization::PointDBSCAN_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reflector_localization::PointDBSCAN_<ContainerAllocator1> & lhs, const ::reflector_localization::PointDBSCAN_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reflector_localization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reflector_localization::PointDBSCAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reflector_localization::PointDBSCAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reflector_localization::PointDBSCAN_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "829e2b7cb144b56b5761debf0b53c879";
  }

  static const char* value(const ::reflector_localization::PointDBSCAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x829e2b7cb144b56bULL;
  static const uint64_t static_value2 = 0x5761debf0b53c879ULL;
};

template<class ContainerAllocator>
struct DataType< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reflector_localization/PointDBSCAN";
  }

  static const char* value(const ::reflector_localization::PointDBSCAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 FAILURE=-3\n"
"int32 NOISE=-2\n"
"int32 UNCLASSIFIED=-1\n"
"int32 CLASSIFIED=0\n"
"\n"
"int32 status\n"
"int32 id\n"
"float64 x\n"
"float64 y \n"
;
  }

  static const char* value(const ::reflector_localization::PointDBSCAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointDBSCAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reflector_localization::PointDBSCAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reflector_localization::PointDBSCAN_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFLECTOR_LOCALIZATION_MESSAGE_POINTDBSCAN_H
